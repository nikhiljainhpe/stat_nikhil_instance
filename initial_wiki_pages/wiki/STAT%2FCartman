## Overview
From [https://github.com/tamentis/cartman]

NOTE: `cm` is the HPCM cluster mananger command, so the cartman commnad has be renamed from `cm` to `scon` 

## Command walk through

### Report Listing and Search

Dump a list of tickets on screen, without details::

    $ scon report 1
    #142. fix world hunger (bjanin@)
    #159. ignore unpaid rent (bjanin@)

Another way to find ticket is using the search command::

    $ scon search dead mouse
    #154. mickey

### Ticket View
Show all the properties of a ticket::

    $ scon view 1

### List of Reports
Get a list of all the available reports with::

    $ scon reports

### System Properties
This will dump on screen all the Milestones, Components, Versions::

    $ scon properties

### Creating a ticket
Creating a ticket will work similarly to writing a new email in mutt_, it loads
your current ``$EDITOR`` and lets you edit the details of the ticket. Assuming
all the parameters are correct, it will create the ticket as soon as you save
and exit and return the ticket number. If your ticket does not appear valid
(missing required field, inexistent Milestone, etc.) *cartman* will stop and
lists each error and let you return to your editor::

    $ scon new
    -- opens your editor --

    Found the following errors:
     - Invalid 'Subject': cannot be blank
     - Invalid 'Milestone': expected: Bug Bucket, Release 2, Release 3

    -- Hit Enter to return to editor, ^C to abort --

The first parameter to ``cm`` is the owner of the ticket, it populates the
``To`` field by default::

    $ scon new jcarmack

If your Trac has custom fields, you can use their identifier in the headers,
e.g.::

    story_id: 5123
    iteration: 15

If you specify a template with -t, cartman will look for a matching file in the
``~/.cartman/templates`` folder and will use it as a base for your ticket::

    $ scon new -t sysadmin

You can define a ``default`` template in this same directory in order to set
the template used by default (without ``-t``).

### Commenting on a ticket

Just like creating a ticket, adding a comment is just like mutt_, your current
``$EDITOR`` will be loaded on a blank file for you to edit. Upon save and exit,
*cartman* will commit this new comment and return silently, unless an error
occurs::

    $ scon comment 1

If the comment is short enough to fit on the command line, you may use the
``-m`` flag as such::

    $ scon comment 1 -m "you forgot to call twiddle()"

### View/Set the status of a ticket

View the current status of a ticket, and the available statuses::

    $ scon status 1

Set a ticket as accepted::

    $ scon status 1 accept

If you need to add a comment with this status change, you can use the ``-c``
flag, it will open your default editor::

    $ scon status 1 reopen -c

You may also use the ``-m`` flag to define the comment in-line, without the use
of an editor::

    $ scon status 1 reopen -m "does not work with x = y"

### Advanced configuration

If you are using vim_ as your default editor, you also might want to add
email-like syntax highlighting to match the ``.cm.ticket`` extension::

    autocmd BufNewFile *.cm.ticket setf mail

If you use multiple Trac sites, you can have multiple configurations in the
same file using the section to separate the sites, here is an example::

    [other]
    base_url = http://other.trac.site/
    username = tamentis
    password = sitnemat
    verify_ssl_cert = False

You would pass the ``-s`` parameter to ``cm`` to define which site to access::

    scon -s other report 1

You may define all common configuration settings in the ``[DEFAULT]`` section.

## Using cartman without editor

You may need to integrate cartman with other software where opening an editor
does not make sense.  In that case you can automatically create tickets from
a file using the ``--message-file`` option::

    scon new --message-file=secerror.txt

This file would need to contain a complete ticket, if anything is missing,
cartman will exit with an error message.