from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os
from datetime import datetime
import logging

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Slack webhook URL - set this as an environment variable for security
SLACK_WEBHOOK_URL = os.environ.get('SLACK_WEBHOOK_URL', 'https://hooks.slack.com/triggers/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')

@app.route('/slack-proxy', methods=['POST'])
def slack_proxy():
    try:
        # Get data from the frontend
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'No data provided'}), 400
        
        text = data.get('text', '')
        name = data.get('name', 'Unknown')
        
        if not text:
            return jsonify({'error': 'No text provided'}), 400
        
        logger.info(f"Received data: {data}")
        
        # Since you want both 'text' and 'name' as separate variables in Workflow Builder
        slack_payload = {
            "text": text,
            "name": name
        }
        
        logger.info(f"Sending payload to Slack: {slack_payload}")
        
        # Send to Slack
        response = requests.post(
            SLACK_WEBHOOK_URL,
            json=slack_payload,
            timeout=10
        )
        
        logger.info(f"Slack response: Status {response.status_code}, Body: {response.text}")
        
        # Check if Slack request was successful
        if response.status_code == 200:
            logger.info(f"Successfully sent message to Slack for user: {name}")
            return jsonify({'message': 'Message sent to Slack successfully'}), 200
        else:
            logger.error(f"Slack API error: {response.status_code} - {response.text}")
            return jsonify({
                'error': 'Failed to send message to Slack', 
                'status': 'error',
                'details': response.text
            }), 500
            
    except requests.exceptions.Timeout:
        logger.error("Timeout when sending to Slack")
        return jsonify({'error': 'Timeout when sending to Slack'}), 500
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {str(e)}")
        return jsonify({'error': 'Network error when sending to Slack'}), 500
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()}), 200

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(405)
def method_not_allowed(error):
    return jsonify({'error': 'Method not allowed'}), 405

if __name__ == '__main__':
    # Check if running in production or development
    debug_mode = os.environ.get('FLASK_ENV') == 'development'
    port = int(os.environ.get('PORT', 5000))
    
    logger.info(f"Starting Flask app on port {port}")
    logger.info(f"Debug mode: {debug_mode}")
    logger.info(f"Slack webhook URL: {SLACK_WEBHOOK_URL}")
    
    app.run(host='0.0.0.0', port=port, debug=debug_mode)